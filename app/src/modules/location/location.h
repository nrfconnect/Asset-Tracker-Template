/*
 * Copyright (c) 2025 Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
 */

#ifndef _LOCATION_H_
#define _LOCATION_H_

#include <zephyr/kernel.h>
#include <zephyr/zbus/zbus.h>
#include <modem/location.h>
#include <modem/lte_lc.h>
#include <nrf_modem_gnss.h>
#include <net/wifi_location_common.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Channels provided by this module */
ZBUS_CHAN_DECLARE(
	LOCATION_CHAN
);

enum location_msg_type {
	/* Output message types */

	/* A location search operation has been initiated and is now active. */
	LOCATION_SEARCH_STARTED = 0x1,

	/* A location search operation has completed successfully or due to timeout/error.
	 * This message indicates that the location module has returned to an inactive state
	 * and is ready to accept new location requests.
	 */
	LOCATION_SEARCH_DONE,

	/* A cloud location request with cellular and/or Wi-Fi scanning data is available
	 * for external processing. The cloud request data is found in the .cloud_request
	 * field of the message.
	 */
	LOCATION_CLOUD_REQUEST,

	/* A request for A-GNSS (Assisted GNSS) data has been generated by the GNSS subsystem.
	 * The A-GNSS request parameters are found in the .agnss_request field of the message.
	 * The application should obtain the requested data and provide it back to the
	 * location subsystem.
	 */
	LOCATION_AGNSS_REQUEST,

	/* GNSS location data has been successfully obtained. The location data is found in
	 * the .gnss_data field of the message.
	 */
	LOCATION_GNSS_DATA,

	/* Input message types */

	/* Request to initiate a location search operation. This will start the configured
	 * location methods (GNSS, Wi-Fi, Cellular) according to the current location
	 * configuration.
	 */
	LOCATION_SEARCH_TRIGGER,

	/* Request to cancel an ongoing location search operation.
	 *
	 * WARNING: This operation has known limitations and may cause issues with Wi-Fi
	 * scanning operations. Specifically:
	 * - Wi-Fi scans cannot be truly cancelled at the driver level and may continue
	 *   running, potentially causing -EBUSY errors on subsequent location requests
	 * - Race conditions may occur between cancellation and scan completion
	 * - Scan results may be lost if cancellation occurs during result collection
	 *
	 *
	 * Use this operation only when absolutely necessary. Before cancelling:
	 * - Ensure sufficient delay between subsequent location requests to avoid conflicts
	 * - Consider implementing retry logic to handle potential -EBUSY errors
	 * - Be aware that Wi-Fi scan results may be incomplete or lost
	 */
	LOCATION_SEARCH_CANCEL,
};

/* Structure to pass location data through zbus */
struct location_msg {
	enum location_msg_type type;
	union {
		/** Contains cloud location request data with cellular and/or Wi-Fi information.
		 *  cloud_request is valid for LOCATION_CLOUD_REQUEST events.
		 */
		struct location_data_cloud cloud_request;

		/** Contains A-GNSS assistance data request parameters.
		 *  agnss_request is valid for LOCATION_AGNSS_REQUEST events.
		 */
		struct nrf_modem_gnss_agnss_data_frame agnss_request;

		/** Contains GNSS location data including coordinates, accuracy and timing.
		 *  gnss_data is valid for LOCATION_GNSS_DATA events.
		 */
		struct location_data gnss_data;
	};
};

#define MSG_TO_LOCATION_TYPE(_msg)	(((const struct location_msg *)_msg)->type)
#define MSG_TO_LOCATION_MSG_PTR(_msg)	(((const struct location_msg *)_msg))

#ifdef __cplusplus
}
#endif

#endif /* _LOCATION_H_ */
