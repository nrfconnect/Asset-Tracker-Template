#
# Copyright (c) 2025 Nordic Semiconductor ASA
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

cmake_minimum_required(VERSION 3.20.0)

find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
project(app_module_test)

test_runner_generate(src/main.c)

set(ASSET_TRACKER_TEMPLATE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../..)

target_sources(app
	PRIVATE
	src/main.c
	src/checks.c
	${ASSET_TRACKER_TEMPLATE_DIR}/app/src/main.c
	${ASSET_TRACKER_TEMPLATE_DIR}/app/src/cbor/cbor_helper.c
)

target_include_directories(app PRIVATE src)

zephyr_include_directories(${ZEPHYR_BASE}/include/zephyr/)
zephyr_include_directories(${ZEPHYR_BASE}/subsys/testsuite/include)
zephyr_include_directories(../../../app/src/common)
zephyr_include_directories(../../../app/src/cbor)
zephyr_include_directories(../../../app/src/modules/cloud)
zephyr_include_directories(../../../app/src/modules/power)
zephyr_include_directories(../../../app/src/modules/button)
zephyr_include_directories(../../../app/src/modules/network)
zephyr_include_directories(../../../app/src/modules/environmental)
zephyr_include_directories(../../../app/src/modules/fota)
zephyr_include_directories(../../../app/src/modules/location)
zephyr_include_directories(../../../app/src/modules/led)

target_link_options(app PRIVATE --whole-archive)

add_compile_options(-Wno-return-type)

set_property(SOURCE ${ASSET_TRACKER_TEMPLATE_DIR}/app/src/main.c PROPERTY COMPILE_FLAGS
	     "-include ${CMAKE_CURRENT_SOURCE_DIR}/src/redef.h")

# Options that cannot be passed through Kconfig fragments
target_compile_definitions(app PRIVATE
	-DCONFIG_APP_LOG_LEVEL=4
	-DCONFIG_APP_MSG_PROCESSING_TIMEOUT_SECONDS=120
	-DCONFIG_APP_WATCHDOG_TIMEOUT_SECONDS=180
	-DCONFIG_APP_CLOUD_PAYLOAD_BUFFER_MAX_SIZE=100
	-DCONFIG_APP_CLOUD_SHADOW_RESPONSE_BUFFER_MAX_SIZE=512
	-DCONFIG_APP_MODULE_TRIGGER_TIMEOUT_SECONDS=600
	-DCONFIG_APP_CLOUD_LOG_LEVEL=0
	-DCONFIG_APP_CLOUD_THREAD_STACK_SIZE=2048
	-DCONFIG_APP_CLOUD_MESSAGE_QUEUE_SIZE=5
	-DCONFIG_APP_CLOUD_BACKOFF_TYPE_LINEAR=1
	-DCONFIG_APP_CLOUD_BACKOFF_INITIAL_SECONDS=6
	-DCONFIG_APP_CLOUD_BACKOFF_LINEAR_INCREMENT_SECONDS=6
	-DCONFIG_APP_CLOUD_BACKOFF_MAX_SECONDS=36
	-DCONFIG_LTE_LC_CONN_EVAL_MODULE=1
	-DCONFIG_LTE_LC_EDRX_MODULE=1
	-DCONFIG_LTE_LC_PSM_MODULE=1
	-DCOAP_CONTENT_FORMAT_APP_JSON=50
	-DCONFIG_APP_POWER=1
	-DCONFIG_APP_ENVIRONMENTAL=1
	-DZEPHYR_INCLUDE_SYS_REBOOT_H_
	-DCONFIG_APP_REQUEST_NETWORK_QUALITY=1
)

# CONSIDER: REUSING THE CODEC GENERATION LOGIC FROM THE MAIN APP

# generate encoder code using zcbor
set(zcbor_command
        zcbor code # Invoke code generation
	--cddl ${APPLICATION_SOURCE_DIR}/../../../app/src/cbor/device_shadow.cddl
	--decode # Generate decoding functions
	--short-names # Attempt to make generated symbol names shorter (at the risk of collision)
	-t config-object # Create a public API for decoding the "config-object" type from the cddl file
	--output-cmake device_shadow.cmake # The generated cmake file will be placed here
)

message(WARNING ${zcbor_command})

execute_process(COMMAND ${zcbor_command}
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMAND_ERROR_IS_FATAL ANY)

# Include the cmake file generated by zcbor. It adds the
# generated code and the necessary zcbor C code files.
include(${CMAKE_CURRENT_BINARY_DIR}/device_shadow.cmake)

# # Ensure that the cmake reconfiguration is triggerred everytime the cddl file changes.
# # This ensures that the codec generation is triggered.
# set_property(
# 	DIRECTORY
# 	PROPERTY
# 	CMAKE_CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/device_shadow.cddl
# )

zephyr_link_libraries(device_shadow)
target_link_libraries(device_shadow PRIVATE zephyr_interface)
